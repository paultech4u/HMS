[{"/home/paultech4u/workspace/projects/HMS-Client/src/index.js":"1","/home/paultech4u/workspace/projects/HMS-Client/src/store.js":"2","/home/paultech4u/workspace/projects/HMS-Client/src/App.js":"3","/home/paultech4u/workspace/projects/HMS-Client/src/reportWebVitals.js":"4","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthStoreSlice.js":"5","/home/paultech4u/workspace/projects/HMS-Client/src/AppProtected.js":"6","/home/paultech4u/workspace/projects/HMS-Client/src/common/Loading.js":"7","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthAPI.js":"8","/home/paultech4u/workspace/projects/HMS-Client/src/reducers/index.js":"9","/home/paultech4u/workspace/projects/HMS-Client/src/auth/index.js":"10","/home/paultech4u/workspace/projects/HMS-Client/src/theme/index.js":"11","/home/paultech4u/workspace/projects/HMS-Client/src/constants.js":"12","/home/paultech4u/workspace/projects/HMS-Client/src/AppDrawer.js":"13","/home/paultech4u/workspace/projects/HMS-Client/src/AppNavbar.js":"14","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthRegSlice.js":"15","/home/paultech4u/workspace/projects/HMS-Client/src/profile/ProfileSlice.js":"16","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthDrawer.js":"17","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthRegisterForm.js":"18","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthForgetPasswordForm.js":"19","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthLoginForm.js":"20","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthNavBar.js":"21","/home/paultech4u/workspace/projects/HMS-Client/src/profile/index.js":"22","/home/paultech4u/workspace/projects/HMS-Client/src/dashboard/index.js":"23","/home/paultech4u/workspace/projects/HMS-Client/src/hooks/index.js":"24","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthCommon.js":"25","/home/paultech4u/workspace/projects/HMS-Client/src/common/Progress.js":"26","/home/paultech4u/workspace/projects/HMS-Client/src/profile/Profile.js":"27","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthPreference.js":"28","/home/paultech4u/workspace/projects/HMS-Client/src/profile/ProfileUploadMenu.js":"29","/home/paultech4u/workspace/projects/HMS-Client/src/common/Card.js":"30"},{"size":594,"mtime":1610717854477,"results":"31","hashOfConfig":"32"},{"size":1175,"mtime":1610884358739,"results":"33","hashOfConfig":"32"},{"size":2115,"mtime":1617979402297,"results":"34","hashOfConfig":"32"},{"size":362,"mtime":1610717854477,"results":"35","hashOfConfig":"32"},{"size":2417,"mtime":1617979923118,"results":"36","hashOfConfig":"32"},{"size":1415,"mtime":1617964108023,"results":"37","hashOfConfig":"32"},{"size":266,"mtime":1610717854477,"results":"38","hashOfConfig":"32"},{"size":1739,"mtime":1617977468907,"results":"39","hashOfConfig":"32"},{"size":276,"mtime":1617980357934,"results":"40","hashOfConfig":"32"},{"size":2576,"mtime":1617973799460,"results":"41","hashOfConfig":"32"},{"size":599,"mtime":1610717854477,"results":"42","hashOfConfig":"32"},{"size":618,"mtime":1617973860188,"results":"43","hashOfConfig":"32"},{"size":8019,"mtime":1616694824088,"results":"44","hashOfConfig":"32"},{"size":5253,"mtime":1617979389813,"results":"45","hashOfConfig":"32"},{"size":1969,"mtime":1617973464390,"results":"46","hashOfConfig":"32"},{"size":350,"mtime":1610993881760,"results":"47","hashOfConfig":"32"},{"size":1895,"mtime":1610801968767,"results":"48","hashOfConfig":"32"},{"size":18682,"mtime":1617973357370,"results":"49","hashOfConfig":"32"},{"size":5443,"mtime":1617980261875,"results":"50","hashOfConfig":"32"},{"size":4672,"mtime":1617978902969,"results":"51","hashOfConfig":"32"},{"size":2013,"mtime":1617979451221,"results":"52","hashOfConfig":"32"},{"size":514,"mtime":1611158632919,"results":"53","hashOfConfig":"32"},{"size":158,"mtime":1610717854477,"results":"54","hashOfConfig":"32"},{"size":325,"mtime":1616762561828,"results":"55","hashOfConfig":"32"},{"size":4620,"mtime":1617978603026,"results":"56","hashOfConfig":"32"},{"size":241,"mtime":1610717854477,"results":"57","hashOfConfig":"32"},{"size":7446,"mtime":1616588248381,"results":"58","hashOfConfig":"32"},{"size":1082,"mtime":1610717854477,"results":"59","hashOfConfig":"32"},{"size":1713,"mtime":1611141788874,"results":"60","hashOfConfig":"32"},{"size":605,"mtime":1610922338334,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"120cigm",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/home/paultech4u/workspace/projects/HMS-Client/src/index.js",[],["125","126"],"/home/paultech4u/workspace/projects/HMS-Client/src/store.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/App.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/reportWebVitals.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthStoreSlice.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/AppProtected.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/common/Loading.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthAPI.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/reducers/index.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/index.js",["127","128","129","130"],"import React, { useState, useLayoutEffect } from 'react';\nimport { lazyload } from '../common/Loading';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Box, Collapse, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { NavBar } from './AuthNavBar';\nimport { authRoute } from '../constants';\nimport { DrawerBar } from './AuthDrawer';\n// import { Footer } from '../common/Footer';\nimport { useIsDesktop } from '../hooks';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst LoginForm = lazyload(() => import('./AuthLoginForm'));\nconst RegisterForm = lazyload(() => import('./AuthRegisterForm'));\nconst ForgetPasswordForm = lazyload(() => import('./AuthForgetPasswordForm'));\n\nfunction AuthPage(props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const isDesktop = useIsDesktop();\n\n  const location = useLocation();\n\n  const toggleDrawer = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useLayoutEffect(() => {\n    if (isDesktop) {\n      setIsOpen(false);\n    }\n  }, [isDesktop]);\n\n  // const { openLogoutAlert } = useSelector((state) => state.auth);\n\n  // const dispatch = useDispatch();\n\n  // const setOpen = (bool) => {\n  //   dispatch(handleLogoutAlert(bool));\n  // };\n\n  // React.useEffect(() => {\n  //   if (openLogoutAlert === true) {\n  //     setTimeout(() => {\n  //       setOpen(false);\n  //     }, 2000);\n  //   }\n\n  //   return () => clearTimeout(1000);\n  // });\n\n  return (\n    <Box height={1} display='flex' flexDirection='column'>\n      {/* <Box>\n        <Collapse in={openLogoutAlert} unmountOnExit={true}>\n          <Alert onClose={() => setOpen(false)} severity='info'>\n            Session expired\n          </Alert>\n        </Collapse>\n      </Box> */}\n      {location.pathname === authRoute.FORGET_PASSWORD ? (\n        <Box>\n          <Typography>Logo</Typography>\n        </Box>\n      ) : (\n        <Box display='flex' paddingY={8}>\n          <NavBar toggleDrawer={toggleDrawer} />\n          <DrawerBar open={isOpen} close={toggleDrawer} />\n        </Box>\n      )}\n      <Box flex={1} display='flex' justifyContent='center' alignItems='center'>\n        <Switch>\n          <Route path={authRoute.LOGIN} component={LoginForm} />\n          <Route path={authRoute.REGISTER} component={RegisterForm} />\n          <Route\n            path={authRoute.FORGET_PASSWORD}\n            component={ForgetPasswordForm}\n          />\n          <Redirect exact to={authRoute.LOGIN} />\n        </Switch>\n      </Box>\n    </Box>\n  );\n}\n\nexport default AuthPage;\n","/home/paultech4u/workspace/projects/HMS-Client/src/theme/index.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/constants.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/AppDrawer.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/AppNavbar.js",["131"],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthRegSlice.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/profile/ProfileSlice.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthDrawer.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthRegisterForm.js",["132","133"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Divider,\n  Typography,\n  Button,\n  Fade,\n  Stepper,\n  Step,\n  StepLabel,\n  StepConnector,\n  withStyles,\n  makeStyles,\n  TextField,\n  MenuItem,\n  Snackbar,\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useIsDesktop } from '../hooks';\nimport { Alert } from '@material-ui/lab';\nimport { HospitalRoles } from '../constants';\nimport AuthPreference from './AuthPreference';\nimport { Progress } from '../common/Progress';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {  registerAction } from './AuthRegSlice';\nimport { FaUserShield, FaHospital, FaUserCog } from 'react-icons/fa';\nimport { AuthCard, TextInput, PasswordInput, ActionButton } from './AuthCommon';\n\n// let vertical = 'bottom';\n// let horizontal = 'left';\n\nfunction Register(props) {\n  const [toggleForm, setToggleForm] = useState(false);\n  const [current, setCurrent] = useState(0);\n\n  const isDesktop = useIsDesktop();\n\n  const dispatch = useDispatch();\n\n  const toggleToFormScreen = () => {\n    setToggleForm(!toggleForm);\n  };\n\n  const handleNext = () => {\n    setCurrent((prev) => prev + 1);\n  };\n\n  const handlePrev = () => {\n    setCurrent((prev) => prev - 1);\n  };\n\n  const regiterschema = Yup.object().shape({\n    hospitalName: Yup.string()\n      .trim()\n      .min(6, 'Must contain 6 character')\n      .max(50, 'Max 50')\n      .required('Required*'),\n    hospitalEmail: Yup.string().email('Invalid email').required('Required*'),\n    state: Yup.string()\n      .trim()\n      .min(3, 'Must contain 3 character')\n      .max(20, 'Max 20')\n      .required('Required*'),\n    address: Yup.string()\n      .trim()\n      .min(6, 'Must contain 6 character')\n      .max(50, 'Max 50')\n      .required('Required*'),\n    zip_code: Yup.number()\n      .positive('Must be a non-negative number')\n      .notRequired(),\n    firstname: Yup.string()\n      .trim()\n      .min(6, 'Minimum of 6 character')\n      .max(20, 'Max 20')\n      .required('Required*'),\n    lastname: Yup.string()\n      .trim()\n      .min(6, 'Minimum of 6 character')\n      .max(20, 'Max 20')\n      .required('Required*'),\n    username: Yup.string()\n      .trim()\n      .min(6, 'Minimum of 6 character')\n      .max(20, 'Max 20')\n      .required('Required*'),\n    email: Yup.string().email('Invalid email').required('Required*'),\n    phone_number: Yup.number().required('Required*'),\n    password: Yup.string()\n      .min(6, 'Minimum of 6 character')\n      .max(20, 'Maximum of 20 character')\n      .required('Required*'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      hospitalName: '',\n      hospitalEmail: '',\n      state: '',\n      address: '',\n      zip_code: '',\n      firstname: '',\n      lastname: '',\n      username: '',\n      email: '',\n      phone_number: '',\n      password: '',\n      role: 'ADMIN',\n    },\n    onSubmit: async (values) => {\n      const admin = {\n        role: values.role,\n        email: values.email,\n        lastname: values.lastname,\n        username: values.username,\n        password: values.password,\n        firstname: values.firstname,\n        phone_number: values.phone_number,\n        hospital_name: values.hospitalName,\n      };\n      const hospital = {\n        state: values.state,\n        address: values.address,\n        zip_code: values.zip_code,\n        hospital_email: values.hospitalEmail,\n        hospital_name: values.hospitalName,\n      };\n\n      const data = { admin, hospital };\n\n      dispatch(registerAction(data));\n    },\n    validationSchema: regiterschema,\n  });\n\n  const { isLoading } = useSelector((state) => {\n    return {\n      // open: state.reg.open,\n      isLoading: state.reg.isLoading,\n      // error: state.reg.error === null ? '' : state.reg.error,\n      // success: state.reg.success === null ? '' : state.reg.success,\n    };\n  });\n\n  // const toggleAlert = () => {\n  //   dispatch(handleAlertClose(false));\n  // };\n\n  return (\n    <AuthCard\n      display='flex'\n      marginX={isDesktop ? 0 : 8}\n      marginBottom={10}\n      variant='outlined'>\n      <Box paddingY={10} marginLeft={13}>\n        <Typography>Logo</Typography>\n      </Box>\n      <Divider />\n      {toggleForm ? (\n        <Fade in={toggleForm} style={{ transitionDelay: '1000ms' }}>\n          <Box>\n            <Box>\n              {/* Stepper */}\n              <Stepper\n                alternativeLabel\n                activeStep={current}\n                connector={<FormStepConnectorStyle />}>\n                {stepsLabel.map((label, index) => (\n                  <Step key={index}>\n                    <StepLabel StepIconComponent={FormStepIcons}>\n                      {label}\n                    </StepLabel>\n                  </Step>\n                ))}\n              </Stepper>\n            </Box>\n            <Box>\n              <HospitalForm\n                values={formik.values}\n                errors={formik.errors}\n                touched={formik.touched}\n                cleartext={formik.resetForm}\n                handleBlur={formik.handleBlur}\n                handleChange={formik.handleChange}\n                hidden={current === 1 || current === 2}\n              />\n              <AdminForm\n                values={formik.values}\n                errors={formik.errors}\n                touched={formik.touched}\n                cleartext={formik.resetForm}\n                handleBlur={formik.handleBlur}\n                handleChange={formik.handleChange}\n                hidden={current === 2 || current === 0}\n              />\n              <AuthPreference hidden={current === 1 || current === 0} />\n            </Box>\n            <Divider />\n            <Box display='flex' justifyContent='flex-end' paddingY={10}>\n              <Box paddingRight={10}>\n                <ActionButton disabled={current === 0} onClick={handlePrev}>\n                  Previous\n                </ActionButton>\n              </Box>\n              <Box paddingRight={10}>\n                {current === 2 ? (\n                  <ActionButton onClick={formik.handleSubmit}>\n                    {isLoading === 'pending' ? (\n                      <Progress in={isLoading === 'pending'} unmountOnExit />\n                    ) : null}\n                    <Typography\n                      style={{\n                        paddingLeft: isLoading === 'pending' ? '10px' : 0,\n                      }}>\n                      Submit\n                    </Typography>\n                  </ActionButton>\n                ) : (\n                  <ActionButton onClick={handleNext}>Next</ActionButton>\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Fade>\n      ) : (\n        <GetStartedScreen toggleToFormScreen={toggleToFormScreen} />\n      )}\n      {/* <Snackbar\n        open={open}\n        onClose={toggleAlert}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        key={vertical + horizontal}\n        autoHideDuration={6000}>\n        <Alert\n          onClose={toggleAlert}\n          elevation={6}\n          severity={success === 'Created' ? 'success' : 'error'}\n          variant='filled'>\n          {success === 'Created' ? success : error}\n        </Alert>\n      </Snackbar> */}\n    </AuthCard>\n  );\n}\n\nfunction HospitalForm(props) {\n  const { values, handleChange, errors, handleBlur, touched } = props;\n  const { hospitalName, hospitalEmail, state, address, zip_code } = errors;\n\n  const isDesktop = useIsDesktop();\n\n  return (\n    <Box hidden={props.hidden}>\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}>\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingBottom={isDesktop ? 0 : 8}>\n          <Typography variant='caption'>Name</Typography>\n          <TextInput\n            name='hospitalName'\n            variant='filled'\n            value={values.hospitalName}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter hospital name'\n            errortext={\n              !!hospitalName && touched.hospitalName ? hospitalName : null\n            }\n            error={!!hospitalName && touched.hospitalName}\n          />\n        </Box>\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingLeft={isDesktop ? 10 : 0}>\n          <Typography variant='caption'>Email</Typography>\n          <TextInput\n            name='hospitalEmail'\n            variant='filled'\n            value={values.hospitalEmail}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            errortext={\n              !!hospitalEmail && touched.hospitalEmail ? hospitalEmail : null\n            }\n            showClearIcon={false}\n            placeholder='Enter hospital email'\n            error={!!hospitalEmail && touched.hospitalEmail}\n          />\n        </Box>\n      </Box>\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}\n        marginY={8}>\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingBottom={isDesktop ? 0 : 8}>\n          <Typography variant='caption'>State</Typography>\n          <TextInput\n            name='state'\n            variant='filled'\n            value={values.state}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter state'\n            errortext={!!state && touched.state ? state : null}\n            error={!!state && touched.state}\n          />\n        </Box>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Address</Typography>\n          <TextInput\n            name='address'\n            variant='filled'\n            onInput={handleChange}\n            onBlur={handleBlur}\n            value={values.address}\n            showClearIcon={false}\n            placeholder='Enter hospital address'\n            errortext={!!address && touched.address ? address : null}\n            error={!!address && touched.address}\n          />\n        </Box>\n      </Box>\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}\n        marginY={8}>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Zip Code:</Typography>\n          <TextInput\n            name='zip_code'\n            variant='filled'\n            value={values.zip_code}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter hospital zip_code'\n            errortext={!!zip_code && touched.zip_code ? zip_code : null}\n            error={!!zip_code && touched.zip_code}\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nfunction AdminForm(props) {\n  const { values, handleChange, errors, handleBlur, touched, hidden } = props;\n  const {\n    firstname,\n    lastname,\n    username,\n    email,\n    phone_number,\n    password,\n  } = errors;\n\n  const isDesktop = useIsDesktop();\n\n  return (\n    <Box hidden={hidden}>\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}>\n        {/* First row */}\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingBottom={isDesktop ? 0 : 8}\n          paddingRight={isDesktop ? 10 : 0}>\n          <Typography variant='caption'>Firstname</Typography>\n          <TextInput\n            name='firstname'\n            variant='filled'\n            value={values.firstname}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter firstname'\n            errortext={!!firstname && touched.firstname ? firstname : null}\n            error={!!firstname && touched.firstname}\n          />\n        </Box>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Lastname</Typography>\n          <TextInput\n            name='lastname'\n            variant='filled'\n            value={values.lastname}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter lastname'\n            errortext={!!lastname && touched.lastname ? lastname : null}\n            error={!!lastname && touched.lastname}\n          />\n        </Box>\n      </Box>\n      {/* Second row */}\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}\n        marginY={8}>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Email Address</Typography>\n          <TextInput\n            name='email'\n            variant='filled'\n            value={values.email}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            errortext={!!email && touched.email ? email : null}\n            showClearIcon={false}\n            placeholder='Enter email'\n            error={!!email && touched.email}\n          />\n        </Box>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Password</Typography>\n          <PasswordInput\n            name='password'\n            variant='filled'\n            onInput={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            errortext={!!password && touched.password ? password : null}\n            error={!!password && touched.password}\n          />\n        </Box>\n      </Box>\n      {/* Third row */}\n      <Box\n        display='flex'\n        justifyContent='space-between'\n        flexDirection={isDesktop ? 'row' : 'column'}\n        marginX={10}\n        marginY={8}>\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingBottom={isDesktop ? 0 : 8}>\n          <Typography variant='caption'>Username</Typography>\n          <TextInput\n            name='username'\n            variant='filled'\n            value={values.username}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            showClearIcon={false}\n            placeholder='Enter username'\n            errortext={!!username && touched.username ? username : null}\n            error={!!username && touched.username}\n          />\n        </Box>\n        <Box\n          display='flex'\n          flexDirection='column'\n          paddingBottom={isDesktop ? 0 : 8}>\n          <Typography variant='caption'>Phone Number</Typography>\n          <TextInput\n            name='phone_number'\n            variant='filled'\n            value={values.phone_number}\n            onInput={handleChange}\n            onBlur={handleBlur}\n            placeholder='Enter phone number'\n            showClearIcon={false}\n            errortext={\n              !!phone_number && touched.phone_number ? phone_number : null\n            }\n            error={!!phone_number && touched.phone_number}\n          />\n        </Box>\n      </Box>\n      <Box marginX={10}>\n        <Box display='flex' flexDirection='column'>\n          <Typography variant='caption'>Role</Typography>\n          <TextField\n            name='role'\n            variant='filled'\n            select\n            disabled\n            value={values.role}\n            onChange={handleChange}\n            helperText='Choose hopital role'>\n            {HospitalRoles.map((option, index) => (\n              <MenuItem key={index} value={option.value}>\n                {option.value}\n              </MenuItem>\n            ))}\n          </TextField>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nconst stepsLabel = ['Hospital Details', 'Admin Details', 'Preference'];\n\nfunction FormStepIcons({ active, completed, icon }) {\n  const styles = useStyles();\n  const icons = {\n    1: <FaHospital size={20} />,\n    2: <FaUserShield size={20} />,\n    3: <FaUserCog size={20} />,\n  };\n  return (\n    <Box\n      className={clsx(styles.stepIcon, {\n        [styles.stepIcon_active]: active,\n        [styles.stepIcon_completed]: completed,\n      })}>\n      {icons[String(icon)]}\n    </Box>\n  );\n}\n\nFormStepIcons.propTypes = {\n  active: PropTypes.bool,\n  completed: PropTypes.bool,\n  icon: PropTypes.number,\n};\n\nfunction GetStartedScreen(props) {\n  const { toggleToFormScreen } = props;\n  const isDesktop = useIsDesktop();\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='center'\n      alignItems='center'\n      flexDirection='column'\n      padding={isDesktop ? 20 : 0}\n      marginTop={18}>\n      <Box paddingY={10}>\n        <Typography>Logo</Typography>\n      </Box>\n      <Box marginY={10}>\n        <Box textAlign='center'>\n          <Typography variant='h5'>Welcome to HMS!</Typography>\n          <Typography>\n            Your health is our piority, We care for your health!\n          </Typography>\n          <Typography>\n            To register click the button below to get started!\n          </Typography>\n        </Box>\n        <Box\n          marginBottom={20}\n          marginTop={10}\n          display='flex'\n          justifyContent='center'>\n          <Button\n            color='primary'\n            variant='contained'\n            onClick={toggleToFormScreen}>\n            Get Started\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  stepIcon: {\n    backgroundColor: '#ccc',\n    zIndex: 1,\n    color: '#fff',\n    width: 50,\n    height: 50,\n    display: 'flex',\n    borderRadius: '50%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  stepIcon_active: {\n    backgroundImage:\n      'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n    boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n  },\n  stepIcon_completed: {\n    backgroundImage:\n      'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\n  },\n}));\n\nconst FormStepConnectorStyle = withStyles({\n  alternativeLabel: {\n    top: 22,\n  },\n  active: {\n    '& $line': {\n      backgroundImage:\n        'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    },\n  },\n  completed: {\n    '& $line': {\n      backgroundImage:\n        'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    },\n  },\n  line: {\n    height: 3,\n    border: 0,\n    backgroundColor: '#eaeaf0',\n    borderRadius: 1,\n  },\n})(StepConnector);\n\nexport default Register;\n","/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthForgetPasswordForm.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthLoginForm.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthNavBar.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/profile/index.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/dashboard/index.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/hooks/index.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthCommon.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/common/Progress.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/profile/Profile.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/auth/AuthPreference.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/profile/ProfileUploadMenu.js",[],"/home/paultech4u/workspace/projects/HMS-Client/src/common/Card.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":4,"column":15,"nodeType":"140","messageId":"141","endLine":4,"endColumn":23},{"ruleId":"138","severity":1,"message":"142","line":5,"column":10,"nodeType":"140","messageId":"141","endLine":5,"endColumn":15},{"ruleId":"138","severity":1,"message":"143","line":12,"column":10,"nodeType":"140","messageId":"141","endLine":12,"endColumn":21},{"ruleId":"138","severity":1,"message":"144","line":12,"column":23,"nodeType":"140","messageId":"141","endLine":12,"endColumn":34},{"ruleId":"138","severity":1,"message":"145","line":6,"column":3,"nodeType":"140","messageId":"141","endLine":6,"endColumn":9},{"ruleId":"138","severity":1,"message":"146","line":17,"column":3,"nodeType":"140","messageId":"141","endLine":17,"endColumn":11},{"ruleId":"138","severity":1,"message":"142","line":23,"column":10,"nodeType":"140","messageId":"141","endLine":23,"endColumn":15},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Button' is defined but never used.","'Snackbar' is defined but never used.","no-global-assign","no-unsafe-negation"]